// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: customer.sql

package entity

import (
	"context"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (first_name, last_name, email, phone)
VALUES ($1, $2, $3, $4)
RETURNING id, first_name, last_name, email, phone
`

type CreateCustomerParams struct {
	FirstName string
	LastName  string
	Email     string
	Phone     string
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customers
WHERE id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCustomer, id)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, first_name, last_name, email, phone
FROM customers
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, id int32) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
	)
	return i, err
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE customers
set first_name = $2,
  last_name = $3,
  email = $4,
  phone = $5
WHERE id = $1
RETURNING id, first_name, last_name, email, phone
`

type UpdateCustomerParams struct {
	ID        int32
	FirstName string
	LastName  string
	Email     string
	Phone     string
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, updateCustomer,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
	)
	return i, err
}
